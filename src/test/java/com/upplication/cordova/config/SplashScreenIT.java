package com.upplication.cordova.config;

import com.upplication.cordova.*;
import com.upplication.cordova.junit.Condition;
import com.upplication.cordova.junit.CordovaCLIRule;
import com.upplication.cordova.junit.OnlyMacOSX;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import static org.junit.Assert.*;

public class SplashScreenIT {

    @Rule
    public CordovaCLIRule cordovaCLIRule = new CordovaCLIRule();
    @Rule
    public TemporaryFolder folder = new TemporaryFolder();

    private CordovaProject cordova;

    @Before
    public void setUp() throws IOException {
        cordova = cordovaCLIRule.get().create(folder.newFolder("cordova-path"));
    }

    @Test
    @Condition(OnlyMacOSX.class)
    public void cordova_ios_by_default_add_some_splash() throws IOException {

        cordova.platform().add(Platform.IOs);

        Path iosScreenPlatformDefaultCordova = cordova.getProject().toPath()
                .resolve("platforms/ios/HelloCordova/Images.xcassets/LaunchImage.launchimage/");
        File[] screensPlatformIos = iosScreenPlatformDefaultCordova.toFile().listFiles();
        List<String> screenPlatformIosName = getFileNames(screensPlatformIos);
        assertEquals(ScreenIos.values().length, screenPlatformIosName.size());
        assertTrue(screenPlatformIosName.containsAll(ScreenIos.getNames()));
    }

    @Test
    @Condition(OnlyMacOSX.class)
    public void set_screens_iphone() throws IOException {

        // see: https://developer.apple.com/ios/human-interface-guidelines/icons-and-images/launch-screen/

        for (ScreenIos screen : ScreenIos.values()) {
            String srcScreen = "res/screen/ios/" + screen.getValue();
            Files.copy(Paths.get("src/test/resources/" + srcScreen),
                    cordova.getProject().toPath().resolve(srcScreen), StandardCopyOption.REPLACE_EXISTING);
            cordova.config()
                    .platform(Platform.IOs)
                    .splash().add(Splash.create().src(srcScreen).width(screen.getWidth()).height(screen.getHeight()));
        }

        // check config.xml is modified
        List<Splash> screensConfig = cordova.config().platform(Platform.IOs).splash().getAll();
        for (int i = 0; i < ScreenIos.values().length; i++) {
            ScreenIos screenIos = ScreenIos.values()[i];
            Splash screenConfig = screensConfig.get(i);

            assertEquals("res/screen/ios/" + screenIos.getValue(), screenConfig.getSrc());
            assertEquals(screenIos.getWidth(), screenConfig.getWidth().intValue());
            assertEquals(screenIos.getHeight(), screenConfig.getHeight().intValue());
        }

        cordova.platform().add(Platform.IOs);

        // check icons is copied in the correct location
        for (ScreenIos screen : ScreenIos.values()) {

            Path originalScreen = cordova.getProject().toPath()
                    .resolve("res/screen/ios")
                    .resolve(screen.getValue());
            Path pathScreenCopied = cordova.getProject().toPath()
                    .resolve("platforms/ios/HelloCordova/Images.xcassets/LaunchImage.launchimage")
                    .resolve(screen.getValue());
            assertEquals("the screen: " + screen + " is not processed correctly", new String(Files.readAllBytes(originalScreen)), new String(Files.readAllBytes(pathScreenCopied)));
        }

        // check no other copied
        Path iosScreenPlatformDefaultCordova = cordova.getProject().toPath()
                .resolve("platforms/ios/HelloCordova/Images.xcassets/LaunchImage.launchimage/");
        File[] screensPlatformIos = iosScreenPlatformDefaultCordova.toFile().listFiles();
        List<String> screensPlatformIosName = getFileNames(screensPlatformIos);
        assertEquals(ScreenIos.values().length , screensPlatformIosName.size());

        List<String> screensGenerated = ScreenIos.getNames();
        assertTrue(screensPlatformIosName.containsAll(screensGenerated));

        // TODO: check file with the content for ios (generated by xcode)
        Path contentJson = cordova.getProject().toPath()
                .resolve("platforms/ios/HelloCordova/Images.xcassets/LaunchImage.launchimage/")
                .resolve("Contents.json");

    }


    private List<String> getFileNames(File[] icons) {
        List<String> result = new ArrayList<>();
        for (File file : icons) {
            if (!file.getName().equals("Contents.json")) {
                result.add(file.getName());
            }
        }
        return result;
    }
}
